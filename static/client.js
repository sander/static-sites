// Generated by CoffeeScript 1.6.2
(function() {
  var $, $$, load, map;

  this.app = {};

  $ = function(selector) {
    return document.querySelector(selector);
  };

  $$ = function(selector) {
    return document.querySelectorAll(selector);
  };

  map = function(list, f) {
    var item, _i, _len, _results;

    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      item = list[_i];
      _results.push(f(item));
    }
    return _results;
  };

  load = function() {
    var request;

    request = new XMLHttpRequest;
    request.open('GET', '/folder', true);
    request.addEventListener('loadend', function() {
      var doc, link, name, node, _i, _len, _ref, _results;

      doc = JSON.parse(this.responseText);
      folder.innerHTML = '';
      if (doc._attachments) {
        _ref = Object.keys(doc._attachments);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          link = document.createElement('a');
          link.href = "http://" + doc._id + "." + location.host + "/" + name;
          link.target = '_blank';
          link.innerText = name;
          node = document.createElement('div');
          node.className = 'file';
          node.appendChild(link);
          _results.push(folder.appendChild(node));
        }
        return _results;
      }
    });
    return request.send();
  };

  this.app.init = function() {
    var loggedin, loggedout;

    login.onclick = function() {
      return navigator.id.request();
    };
    logout.onclick = function() {
      return navigator.id.logout();
    };
    loggedin = function(email) {
      document.body.classList.add('is_authenticated');
      document.body.classList.remove('is_anonymous');
      map($$('output[name="email"]'), function(el) {
        return el.innerText = email;
      });
      return load();
    };
    loggedout = function() {
      document.body.classList.add('is_anonymous');
      return document.body.classList.remove('is_authenticated');
    };
    navigator.id.watch({
      onlogin: function(assertion) {
        var request;

        request = new XMLHttpRequest;
        request.open('POST', '/persona/verify', true);
        request.setRequestHeader('Content-Type', 'application/json');
        request.addEventListener('loadend', function() {
          var data;

          data = JSON.parse(this.responseText);
          if ((data != null ? data.status : void 0) === 'okay') {
            return loggedin(data.email);
          } else {
            return loggedout();
          }
        });
        return request.send(JSON.stringify({
          assertion: assertion
        }));
      },
      onlogout: function() {
        var request;

        request = new XMLHttpRequest;
        request.open('POST', '/persona/logout', true);
        request.addEventListener('loadend', function() {
          return loggedout();
        });
        return request.send();
      }
    });
    folder.addEventListener('dragover', function(e) {
      e.stopPropagation();
      e.preventDefault();
      return e.dataTransfer.dropEffect = 'copy';
    });
    return folder.addEventListener('drop', function(e) {
      var files, upload;

      e.stopPropagation();
      e.preventDefault();
      upload = function(file) {
        var request;

        request = new XMLHttpRequest;
        request.open('PUT', '/folder/' + encodeURIComponent(file.name, true));
        request.setRequestHeader('Content-Type', file.type);
        request.addEventListener('loadend', function() {
          return load();
        });
        return request.send(file);
      };
      files = e.dataTransfer.files;
      return map(files, upload);
    });
  };

}).call(this);
